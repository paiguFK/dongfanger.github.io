5 数据库
========

|image1|

**MySQL join、left join、right join区别。**

::

   join
   只显示完全匹配on条件的数据
   等价于 inner join
   等价于 where 即多表联合查询
   left join
   保留左表数据，右表不匹配的为NULL
   等价于 left outer join
   right join
   保留右表数据，左表不匹配的为NULL
   等价于 right outer join

**mysql分表的原因？**

::

   一张表数据量大了以后，会出现性能问题，需要做分表，减小数据库压力，提高性能。

**mysql分表的方式？**

::

   垂直分表：将部分字段分离出来，设计成分表，根据主表的主键关联。
   水平分表：将相同字段表中的记录按照某种Hash算法进行拆分多个分表。

**衡量SQL的性能好坏的标准？**

::

   执行耗时短
   资源开销小
   执行计划好（调用&解析次数）

**什么时候做读写分离？什么时候做分库分表？**

::

   访问量大的做读写分离
   数量大的做分库分表

**``count(*)``\ 和\ ``count(1)``\ 和\ ``count(列名)``\ 区别？执行效率上？**

::

   执行效果上：
   count(*)包括了所有的列，相当于行数，在统计结果的时候，不会忽略列值为NULL 
   count(1)包括了忽略所有列，用1代表代码行，在统计结果的时候，不会忽略列值为NULL  
   count(列名)只包括列名那一列，在统计结果的时候，会忽略列值为空

   执行效率上：
   列名为主键，count(列名)会比count(1)快  
   列名不为主键，count(1)会比count(列名)快  
   如果表多个列并且没有主键，则count(1)的执行效率优于count(*) 
   如果有主键，则 select count(主键)的执行效率是最优的  
   如果表只有一个字段，则 select count(*)最优  

**某个表格中有10条一模一样的数据，现在要删掉其中的9条，请你写一下sql语句。**

::

   delete * from table_name limit 9

**MySQL中char和varchar的区别？**

::

   char：定长，范围是0～255，效率高
   varchar：不定长，最长是64k，效率偏低

   延伸：
   char和varchar可以有默认值，text不能指定默认值。

**数据库连接泄露的含义？**

::

   没有正确地关闭Connection、Statement和ResultSet资源，连接得不到释放，可用连接越来越少。

**索引的优点与不足?**

::

   优点：
   提高数据的检索速度；
   加快表与表之间的连接；
   减少服务器需要扫描的数据量；
   唯一性索引可以保证表中数据的唯一性。
   缺点：
   创建索引需要时间；
   索引需要占用物理空间；
   修改数据时，索引也需要动态维护。

**mysql日期获取？**

::

   # 当前时间
   select now()
   # 格式化，H24小时制，h12小时制
   select date_format(now(), '%Y-%m-%d %H:%i:%s')  
   # 字符串转日期
   select str_to_date('2020-04-18 21:42:23', '%Y-%m-%d %H:%i:%s')

**主键、外键的作用？**

::

   主键：表记录的唯一标识，保证数据的唯一性。
   外键：用于与另一张表关联，保证了数据的完整性。

**索引的数据结构是什么？**

::

   B+树。

**数据库事务四大特性？**

::

   原子性、一致性、隔离性、持久性。

**脏读和幻读？**

::

   脏读。B事务修改了一个数据并未提交，A事务读取了这个数据，然后B事务回滚了，最后A又读取了一次，两次读取的数据不一致。
   幻读。A事务更新了某个字段，B事务又插入了一条新的记录，导致A事务认为自己没有完全更新过来，就像出现幻觉一样。

.. |image1| image:: ../wanggang.png
