单元测试 8题
============

|image1|

**说说代码覆盖率的好处？**

::

   形成质量指标。作为版本发布的前置要求
   分析测试死角。多个测试用例都覆盖不到的代码
   找到历史废弃代码。收集方法覆盖率，为废弃代码判断提供依据
   度量自动化用例。为自动化用例提供覆盖率统计情况
   帮助代码优化。分析热区代码，为优化提供支撑
   精准回归。构建代码调用关系，自动选择用例

**代码覆盖率过程简述？**

::

   代码，插桩，编译，插桩后代码，运行，得到覆盖率数据。

**单元测试的AIR原则和BCDE原则？**

::

   Automatic(自动化) 单元测试应该是全自动执行的，并且非交互式的。
   Independent(独立性)保持单元测试的独立性。
   Repeatable(可重复)单元测试是可以重复执行的，不能受到外界环境的影响。

   Border：边界值测试，包括循环边界、特殊取值、特殊时间点、数据顺序等。
   Correct：正确的输入，并得到预期的结果。
   Design：与设计文档相结合，来编写单元测试。
   Error：强制错误信息输入（如:非法数据、异常流程、非业务允许输入等），并得到预期的结果。

**Java代码覆盖率工具原理？**

::

   主流代码覆盖率工具都采用字节码插桩模式，通过钩子的方式来记录代码执行轨迹信息。其中字节码插桩又分为两种模式On-The-Fly和Offine。
   On-The-Fly模式优点在于无需修改源代码，可以在系统不停机的情况下，实时收集代码覆盖率信息。
   On-the-fly方式无须入侵应用启动脚本，只需在JVM中通过-javaagent参数指定jar文件启动Instrumentation的代理程序，代理程序在通过Class Loader装载一个class前判断是否需要注入class文件，将统计代码插入class，测试覆盖率分析就可以在JVM执行测试的过程中完成。

**说说驱动模块和桩模块？**

::

   驱动模块：模拟被测试单元的上级模块，能调用被测试单元。
   桩模块：模拟被测试单元调用的下层模块。

   驱动模块主要完成内容：
   1 接受测试输入 
   2 对输入进行判断 
   3 将输入传递给被测试单元，驱动被测单元执行 
   4 接受被测单元执行结果，并对结果进行判断 
   5 将判断结果作为用例执行结果输出测试报告

**白盒测试的覆盖准则是什么？**

::

   ESTCA覆盖准则  Errors Sensitive Test Cases Analysis
   LCSAJ覆盖准则 Linear Code Sequence And Jump

**白盒测试的重点都有哪些？**

::

   模块接口测试
   模块局部数据结构测试
   模块边界条件测试
   模块执行路径测试
   模块出错处理测试

**如何开展白盒测试？**

::

   先用自动化工具来进行静态结构分析，然后进行动态测试，如：覆盖率测试。

.. |image1| image:: ../wanggang.png
