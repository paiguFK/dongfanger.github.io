Python运算符可不只有加减乘除
============================

|image1|

数学里面的加减乘除，就是运算符，但是 Python
的运算符更多样，更复杂，分为算术运算符、比较运算符、赋值运算符、位运算符、逻辑运算符、成员运算符、身份运算符。为了更直观的看到运算符的使用，本文采用代码和注释结合的方式进行讲解。

算术运算符
----------

.. code:: python

   a = 21
   b = 10
   c = 0

   # 加
   c = a + b  # 31

   # 减
   c = a - b  # 11

   # 乘
   c = a * b  # 210

   # 除
   c = a / b  # 2.1

   # 求余数
   c = a % b  # 1

   # 幂（次方）
   a = 2
   b = 3
   c = a**b  # 8

   # 取整数，向下取接近商的整数
   c = 9//2  # 4
   c = -9//2  # -5

比较运算符
----------

   代码中的 ``if ... else ...``
   是指“如果，满足条件，做什么事，否则，做其他事”。

.. code:: python

   a = 21
   b = 10
   c = 0

   # 等于
   if ( a == b ):
      print("a 等于 b")
   else:
      print("a 不等于 b")

   # 不等于
   if ( a != b ):
      print("a 不等于 b")
   else:
      print("a 等于 b")

   # 小于
   if ( a < b ):
      print("a 小于 b")
   else:
      print("a 大于等于 b")

   # 大于
   if ( a > b ):
      print("a 大于 b")
   else:
      print("a 小于等于 b")
    
   a = 5
   b = 20

   # 小于等于
   if ( a <= b ):
      print("a 小于等于 b")
   else:
      print("a 大于  b")

   # 大于等于
   if ( b >= a ):
      print("b 大于等于 a")
   else:
      print("b 小于 a")

赋值运算符
----------

``=`` 是赋值运算符，算术运算符都可以右边加上 ``=``
变成“算术赋值”运算符。

.. code:: python

   a = 21
   b = 10
   c = 0

   # 简单的赋值
   c = a + b  # 31

   # 等价于 c = c + a
   c += a  # 52

   # 等价于 c = c - a
   c -= a  # 31

   # 等价于 c = c * a
   c *= a  # 651

   # 等价于 c = c / a
   c /= a  # 31.0
    
   c = 2
   # 等价于 c = c % a
   c %= a  # 2

   # 等价于 c = c ** a
   c **= a  # 2097152

   # 等价于 c = c // a
   c //= a  # 99864

Python3.8 新增了海象运算符 ``:=``\ ，可以在表达式内部为变量赋值：

.. code:: python

   if (n := len(a)) > 10:
       print(f"List is too long ({n} elements, expected <= 10)")

位运算符
--------

我们常见的数字是十进制的，十进制可以转换为 01 形式的二进制，例如 60
的转换为二进制后变成了 0011
1100。位运算符就是把数字看作二进制来进行计算。

.. code:: python

   a = 60            # 60 = 0011 1100 
   b = 13            # 13 = 0000 1101 
   c = 0

   # 与，两个值都为1，结果为1，否则为0
   c = a & b        # 12 = 0000 1100

   # 或，两个值有一个为1，结果就为1
   c = a | b        # 61 = 0011 1101 

   # 异或，两个值不同，结果为1
   c = a ^ b        # 49 = 0011 0001

   # 取反，0变成1,1变成0
   c = ~a           # -61 = 1100 0011

   # 左移，高位丢弃，低位补0
   c = a << 2       # 240 = 1111 0000

   # 右移，低位丢弃，高位补0
   c = a >> 2       # 15 = 0000 1111

逻辑运算符
----------

经常用在判断条件里面，判断条件为 True / False。

.. code:: python

   a = 10
   b = 20

   # 布尔“与”，2个值都为True，结果为True
   if ( a and b ):
      print("变量 a 和 b 都为 true")
   else:
      print("变量 a 和 b 有一个不为 true")

   # 布尔“或”，只要有一个为True，结果就为True
   if ( a or b ):
      print("变量 a 和 b 都为 true，或其中一个变量为 true")
   else:
      print("变量 a 和 b 都不为 true")
    
   # 修改变量 a 的值
   a = 0
   if ( a and b ):
      print("变量 a 和 b 都为 true")
   else:
      print("变量 a 和 b 有一个不为 true")
    
   if ( a or b ):
      print("变量 a 和 b 都为 true，或其中一个变量为 true")
   else:
      print("变量 a 和 b 都不为 true")
    
   if not( a and b ):
      print("变量 a 和 b 都为 false，或其中一个变量为 false")
   else:
      print("变量 a 和 b 都为 true")

注意，逻辑运算符是从左到右依次运算的，只要不符合条件就不会继续运算，比如
and，只要出现了 False，就会停止运算，结果直接判定为 False。比如
or，只要出现了 True，就会停止运算，结果直接判定为 True。

成员运算符
----------

成员是指字符串、列表、元组等系列中的元素，成员运算符用于判断元素是否在系列里面。

.. code:: python

   a = 10
   b = 20
   list = [1, 2, 3, 4, 5 ]

   # in 在里面
   if ( a in list ):
      print("变量 a 在给定的列表中 list 中")
   else:
      print("变量 a 不在给定的列表中 list 中")

   # not in 不在里面
   if ( b not in list ):
      print("变量 b 不在给定的列表中 list 中")
   else:
      print("变量 b 在给定的列表中 list 中")

身份运算符
----------

Python 里面的对象其实都有一个内存地址，可以使用 ``id()``
函数来获取，身份就是指的内存地址。

.. code:: python

   a = 20
   b = a
    
   if ( a is b ):
      print("a 和 b 有相同的标识")  # 结果
   else:
      print("a 和 b 没有相同的标识")
    
   if ( id(a) == id(b) ):
      print("a 和 b 有相同的标识")  # 结果
   else:
      print("a 和 b 没有相同的标识")
    
   # 修改变量 b 的值
   b = 30
   if ( a is b ):
      print("a 和 b 有相同的标识")
   else:
      print("a 和 b 没有相同的标识")  # 结果
    
   if ( a is not b ):
      print("a 和 b 没有相同的标识")  # 结果
   else:
      print("a 和 b 有相同的标识")

我们在前面知道 ``==`` 是可以判断变量是否相等的，注意，\ ``==``
判断的是值是否相等，\ ``is`` 判断的是引用（内存地址）是否相等。

运算符优先级
------------

不用刻意记优先级，实际编码时请尽情滥用小括号 ``()``\ ，防止优先级算错。

+----------------------------+----------------------------------------+
| 运算符                     | 描述                                   |
+============================+========================================+
| \*\*                       | 指数 (最高优先级)                      |
+----------------------------+----------------------------------------+
| ~ + -                      | 按位翻转, 一元加号和减号               |
|                            | (最后两个的方法名为 +@ 和 -@)          |
+----------------------------+----------------------------------------+
| \* / % //                  | 乘，除，求余数和取整除                 |
+----------------------------+----------------------------------------+
| + -                        | 加法减法                               |
+----------------------------+----------------------------------------+
| >> <<                      | 右移，左移运算符                       |
+----------------------------+----------------------------------------+
| &                          | 位 ‘AND’                               |
+----------------------------+----------------------------------------+
| ^ \|                       | 位运算符                               |
+----------------------------+----------------------------------------+
| <= < > >=                  | 比较运算符                             |
+----------------------------+----------------------------------------+
| == !=                      | 等于运算符                             |
+----------------------------+----------------------------------------+
| = %= /= //= -= += \*= \**= | 赋值运算符                             |
+----------------------------+----------------------------------------+
| is is not                  | 身份运算符                             |
+----------------------------+----------------------------------------+
| in not in                  | 成员运算符                             |
+----------------------------+----------------------------------------+
| not and or                 | 逻辑运算符                             |
+----------------------------+----------------------------------------+

小结
----

本文以实例的形式直观的介绍了 Python 运算符的使用。运算符是 Python
中相对简单的知识点。

参考资料：

https://www.runoob.com/python3/python3-basic-operators.html

.. |image1| image:: ../wanggang.png
