1 搭建类似pytest的Java环境把Java搞起来
======================================

|image1|

每次想写Java都被环境折腾困扰，不如写Python这般顺畅。为了解决这个问题，我写下这篇文章，归档到在线电子书，以备不时查看之需。

安装Java
--------

Python安装包是个\ ``.exe``\ 文件，比如\ ``python-3.8.3.exe``\ 。Java也是如此，区别在于文件名不是\ ``java-xxx.exe``\ 而是\ ``jdk-xxx.exe``\ ，比如\ ``jdk-8u281-windows-x64.exe``\ ，\ ``jdk``\ 是\ ``Java Development Kit``\ 的缩写，指Java开发工具包，包括以下内容：

|image2|

JDK的最新版本为15，但是国内大多数公司仍然使用的是JDK8，这是因为JDK8是各方面都很成熟稳定的版本，并且基于JDK8开发的业务系统已经具有一定规模，新版本JDK并不能完全无感知的迁移，需要做代码修改和测试，会是一笔巨大开销，为了降低成本和规避兼容问题风险，JDK8沿用到了至今。JDK8的下载地址如下：

https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html

选择相应的版本下载：

|image3|

比如我的电脑是Windows
64位的系统，就选择了\ ``Windows x64``\ 这个版本，会下载到一个\ ``jdk-8u281-windows-x64.exe``\ 文件。Java已经被Oracle收购了，需要登录Oracle账号后才能下载，没有账号注册一个也很方便：

|image4|

下载后可以开始安装了：

|image5|

安装到默认位置即可，直接下一步。中途会让选择JRE（Java Runtime
Environment，Java运行环境）的目标文件夹：

|image6|

依然保持默认即可。安装结束后就能看到两个新文件夹了：

|image7|

以前，还需要配置系统环境变量，设置\ ``JAVA_HOME``\ 和\ ``CLASSPATH``\ 才能使用Java。现在，安装完成即可用。打开\ ``cmd``\ 输入\ ``java -version``\ ，命令能执行成功就表示Java已经安装好了：

|image8|

安装IntelliJ IDEA
-----------------

JetBrains全家桶中也有专门用来写Java的，叫做\ ``IntelliJ IDEA``\ ，一般只说后面一个单词“哎迪儿”就知道是这个东西了。下载地址为：

https://www.jetbrains.com/idea/download/#section=windows

|image9|

个人建议选择旗舰版，看着齐全。下载后双击\ ``ideaIU-2020.3.2.exe``\ 安装，先别忙着打开。

**Maven仓库**

Python第三方库通过\ ``pip install``\ 命令来运行安装，可以在pypi网站上检索：

https://pypi.org/

Java第三方包通过\ ``pom.xml``\ 文件来配置安装，可以在mvnrepository网站上检索：

https://mvnrepository.com/

官方仓库有时候下载速度很慢，可以找国内镜像替代，我们先把Maven中央仓库从Apache替换成阿里云。先打开本地目录\ ``D:\Program Files\JetBrains\IntelliJ IDEA 2020.3.2\plugins\maven\lib\maven3\conf``\ ：

|image10|

编辑\ ``settings.xml``\ 文件，找到\ ``<mirrors>``\ 标签，添加代码：

.. code:: xml

       <mirror>
         <id>aliyunmaven</id>
         <mirrorOf>*</mirrorOf>
         <name>阿里云公共仓库</name>
         <url>https://maven.aliyun.com/repository/public</url>
       </mirror>

|image11|

   这是新版写法，官网https://maven.aliyun.com/mvn/guide有说明。

接着可以打开IDEA了，欢迎界面映入眼帘：

|image12|

新建项目
--------

选择新建Maven项目：

|image13|

填写项目名和存放位置：

|image14|

在\ ``pom.xml``\ 文件中添加仓库配置：

.. code:: xml

       <repositories>
           <repository>
               <id>public</id>
               <url>https://maven.aliyun.com/repository/public</url>
           </repository>
       </repositories>

       <pluginRepositories>
           <pluginRepository>
               <id>public</id>
               <url>https://maven.aliyun.com/repository/public</url>
           </pluginRepository>
       </pluginRepositories>

|image15|

记得点击右上角的\ ``Load Maven Changes``\ 按钮。至此，以阿里云为Maven中央仓库的项目就创建好了。

添加TestNG
----------

Python默认测试框架是\ ``unittest``\ ，需要改配置切换到\ ``pytest``\ 。Java默认测试框架是\ ``JUnit``\ ，需要安装新包切换到\ ``TestNG``\ 。打开上文所述的mvnrepository网站，搜索\ ``TestNG``\ ：

|image16|

点进去选择某个用的多比较多的版本：

|image17|

复制xml配置：

|image18|

.. code:: xml

   <!-- https://mvnrepository.com/artifact/org.testng/testng -->
   <dependency>
       <groupId>org.testng</groupId>
       <artifactId>testng</artifactId>
       <version>6.14.3</version>
       <scope>test</scope>
   </dependency>

打开项目的\ ``pom.xml``\ ，添加\ ``<dependencies></dependencies>``\ 标签：

.. code:: xml

       <dependencies>
       </dependencies>

再粘贴上刚才复制的\ ``TestNG``\ 配置：

|image19|

同样的别忘了点击右上角的\ ``Load Maven Changes``\ 按钮。这行代码\ ``<scope>test</scope>``\ 需要特别注意，它表示\ ``TestNG``\ 的作用范围是\ ``test``\ ：

|image20|

如果此时在\ ``src\main\java``\ 写\ ``TestNG``\ 的代码是会报错的：

|image21|

在\ ``src\test\java``\ 不会：

|image22|

要么去掉\ ``<scope>``\ ，要么就只在\ ``test\java``\ 目录下写测试代码。代码写好了，最后执行一下，点击绿色箭头：

|image23|

运行成功。至此，整个项目环境就搞好了，可以开始顺畅地写Java代码了。相关测试代码如下：

.. code:: java

   import org.testng.annotations.Test;

   public class TestTest {
       @Test
       public void hello() {
           System.out.println("Hello Main Test");
       }

   }

其他设置
--------

**UTF-8**

|image24|

**网络自动代理**

|image25|

|image26|

小结
----

本文介绍了如何从0开始搭建类似pytest的Java环境，整个过程和搭建pytest环境大同小异，理解起来比较容易。从过程中可以看出，Java确实比Python繁琐一些，好在现在已经做了些优化，相对来说化繁为简了。

   参考资料：

   https://zh.wikipedia.org/zh-hans/JDK

.. |image1| image:: ../wanggang.png
.. |image2| image:: 001-搭建类似pytest的Java环境把Java搞起来/image-20210304120129576.png
.. |image3| image:: 001-搭建类似pytest的Java环境把Java搞起来/image-20210304120845992.png
.. |image4| image:: 001-搭建类似pytest的Java环境把Java搞起来/image-20210304125340691.png
.. |image5| image:: 001-搭建类似pytest的Java环境把Java搞起来/image-20210304130050808.png
.. |image6| image:: 001-搭建类似pytest的Java环境把Java搞起来/image-20210304130213386.png
.. |image7| image:: 001-搭建类似pytest的Java环境把Java搞起来/image-20210304130520551.png
.. |image8| image:: 001-搭建类似pytest的Java环境把Java搞起来/image-20210304130822257.png
.. |image9| image:: 001-搭建类似pytest的Java环境把Java搞起来/image-20210304144542218.png
.. |image10| image:: 001-搭建类似pytest的Java环境把Java搞起来/image-20210304134539351.png
.. |image11| image:: 001-搭建类似pytest的Java环境把Java搞起来/20200919072350460.png
.. |image12| image:: 001-搭建类似pytest的Java环境把Java搞起来/image-20210304131305663.png
.. |image13| image:: 001-搭建类似pytest的Java环境把Java搞起来/image-20210304135115646.png
.. |image14| image:: 001-搭建类似pytest的Java环境把Java搞起来/image-20210304135234060.png
.. |image15| image:: 001-搭建类似pytest的Java环境把Java搞起来/image-20210304135603882.png
.. |image16| image:: 001-搭建类似pytest的Java环境把Java搞起来/image-20210304140316374.png
.. |image17| image:: 001-搭建类似pytest的Java环境把Java搞起来/image-20210304140421059.png
.. |image18| image:: 001-搭建类似pytest的Java环境把Java搞起来/image-20210304140503091.png
.. |image19| image:: 001-搭建类似pytest的Java环境把Java搞起来/image-20210304140818142.png
.. |image20| image:: 001-搭建类似pytest的Java环境把Java搞起来/image-20210304141037952.png
.. |image21| image:: 001-搭建类似pytest的Java环境把Java搞起来/image-20210304141948439.png
.. |image22| image:: 001-搭建类似pytest的Java环境把Java搞起来/image-20210304142011378.png
.. |image23| image:: 001-搭建类似pytest的Java环境把Java搞起来/image-20210304142213878.png
.. |image24| image:: 001-搭建类似pytest的Java环境把Java搞起来/image-20210304144349602.png
.. |image25| image:: 001-搭建类似pytest的Java环境把Java搞起来/image-20210304144746134.png
.. |image26| image:: 001-搭建类似pytest的Java环境把Java搞起来/image-20210304144806837.png
